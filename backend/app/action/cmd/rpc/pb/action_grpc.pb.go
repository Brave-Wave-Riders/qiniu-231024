// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: desc/action.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Actionrpc_Follow_FullMethodName = "/pb.actionrpc/Follow"
)

// ActionrpcClient is the client API for Actionrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionrpcClient interface {
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
}

type actionrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewActionrpcClient(cc grpc.ClientConnInterface) ActionrpcClient {
	return &actionrpcClient{cc}
}

func (c *actionrpcClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	out := new(FollowResp)
	err := c.cc.Invoke(ctx, Actionrpc_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionrpcServer is the server API for Actionrpc service.
// All implementations must embed UnimplementedActionrpcServer
// for forward compatibility
type ActionrpcServer interface {
	Follow(context.Context, *FollowReq) (*FollowResp, error)
	mustEmbedUnimplementedActionrpcServer()
}

// UnimplementedActionrpcServer must be embedded to have forward compatible implementations.
type UnimplementedActionrpcServer struct {
}

func (UnimplementedActionrpcServer) Follow(context.Context, *FollowReq) (*FollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedActionrpcServer) mustEmbedUnimplementedActionrpcServer() {}

// UnsafeActionrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionrpcServer will
// result in compilation errors.
type UnsafeActionrpcServer interface {
	mustEmbedUnimplementedActionrpcServer()
}

func RegisterActionrpcServer(s grpc.ServiceRegistrar, srv ActionrpcServer) {
	s.RegisterService(&Actionrpc_ServiceDesc, srv)
}

func _Actionrpc_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionrpcServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actionrpc_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionrpcServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Actionrpc_ServiceDesc is the grpc.ServiceDesc for Actionrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actionrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.actionrpc",
	HandlerType: (*ActionrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _Actionrpc_Follow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/action.proto",
}
